发现问题：每一个模块的MVP高度抽象，都存在相同的代码，
        出现大量的代码沉余。不太好处理？


解决方案：代理模式--->双重代理模式

    首先：分析双重代理分别表示什么？

        第一重代理：代理activity的生命周期。
        为什么要代理activity的生命周期？
            答：因为不同模块，生命周期不同。

                一方面：加载数据的逻辑不一样。
                (例如：activity需要在onCreate里面调用，但是在fragment里面就是在onViewCreate，在Layout里面是在onFinishLayout调用。)

                另一方面：为我们后续数据的缓冲做准备

                以上两点是最核心的原因


        第二重代理：代理MVP的实现（基于第一重代理基础上做的处理）
        为什么要代理MVP的实现？
            答：解决代码沉余问题。


    其次：分析第一重代理角色？
        代理模式
        角色一：目标接口
            ActivityMvpDelegate
        角色二：目标对象
            ActivityMvpDelegateImpl
        角色三：代理对象
            BaseActivity

    其次：分析第二重代理角色？
            作用：绑定和解绑
            角色一：目标接口
                绑定和解绑高度抽象接口
                MvpCallback
            角色二：目标对象
                具体的activity--->例如BaseActivity以及子类
            角色三：代理对象
                ProxyMvpCallback：单独定义的一个实现类

    其次：将第一重代理和第二重代理进行关联
